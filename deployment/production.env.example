# Production Environment Configuration
# Copy this file and rename to .env for production deployment

# Application Settings
APP_NAME="E-commerce API"
VERSION="1.0.0"
ENVIRONMENT=production
DEBUG=false

# Database Configuration
# Supabase PostgreSQL connection string
DATABASE_URL=postgresql://postgres:[YOUR_PASSWORD]@[YOUR_PROJECT_REF].supabase.co:5432/postgres

# JWT Configuration - CHANGE THESE IN PRODUCTION
SECRET_KEY=your-super-secret-key-minimum-32-characters-long-change-this-in-production
ALGORITHM=HS256
ACCESS_TOKEN_EXPIRE_MINUTES=30

# CORS Settings - Update with your frontend domains
CORS_ORIGINS=["https://yourdomain.com", "https://www.yourdomain.com"]
CORS_ALLOW_CREDENTIALS=true

# Rate Limiting - Redis Configuration
# For Railway: Use Railway Redis add-on
# For Render: Use external Redis service (Redis Cloud, Upstash)
REDIS_URL=redis://default:[PASSWORD]@[HOST]:[PORT]

# Logging Configuration
LOG_LEVEL=INFO
LOG_FORMAT=json

# Email Configuration (Production SMTP)
SMTP_HOST=smtp.gmail.com
SMTP_PORT=587
SMTP_USERNAME=your-production-email@example.com
SMTP_PASSWORD=your-app-password-or-api-key
EMAIL_FROM=noreply@yourdomain.com

# Security Settings
ALLOWED_HOSTS=["yourdomain.com", "api.yourdomain.com"]

# Monitoring (Optional - for external monitoring services)
SENTRY_DSN=https://your-sentry-dsn-here
MONITORING_ENABLED=true

# API Documentation (set to false in production for security)
DOCS_ENABLED=false

# Production Deployment Checklist:
# 1. Generate strong SECRET_KEY: python -c "import secrets; print(secrets.token_urlsafe(32))"
# 2. Update CORS_ORIGINS with your actual frontend domains
# 3. Configure SMTP settings for email notifications
# 4. Set up PostgreSQL database on Supabase
# 5. Configure Redis for rate limiting (Railway add-on or external service)
# 6. Set DOCS_ENABLED=false for production security
# 7. Configure monitoring (Sentry, etc.)
# 8. Set up SSL/TLS certificates (handled by Railway/Render)
# 9. Configure domain names and DNS
# 10. Test all endpoints after deployment